/**
 * This file implements a catch-all route that renders the user-facing pages
 * generated by Puck. For any route visited (with exception of other hardcoded
 * pages in /app), it will check your database (via `getPage`) for a Puck page
 * and render it using <Render>.
 *
 * All routes produced by this page are statically rendered using incremental
 * static site generation. After the first visit, the page will be cached as
 * a static file. Subsequent visits will receive the cache. Publishing a page
 * will invalidate the cache as the page is written in /api/puck/route.ts
 */

import { Client } from "./client";
import { notFound } from "next/navigation";
import { Metadata } from "next";
import { getPage } from "../../lib/get-page";
import { Data } from "@measured/puck";
import { apiIntercept } from "../../services";

export async function generateMetadata({
  params: { puckPath = [] },
}: {
  params: { puckPath: string[] };
}): Promise<Metadata> {
  const path = `/${puckPath.join("/")}`;

  return {
    title: getPage(path)?.root.props.title,
  };
}

// Load API Data from database Json
export async function getServerData(data: Data) {
  let results: any = {};
  for (const item of data.content) {
    if (item.props?.url && item.props?.key) {
      if (!results[item.props.key]) {
        const response = await apiIntercept(item.props.url, item.props.body);
        if (response) {
          results[item.props.key] = response;
        }
      }
    }
  }

  return results;
}

// Add data in props in database Json
export async function getUpdateData(data: Data) {
  for (const item of data.content) {
    if (item.props?.url) {
      const response = await apiIntercept(item.props.url, item.props.body);
      if (response) {
        item.props.apiData = response;
      }
    }
  }
  return data;
}

type TPage = Readonly<{
  params: { puckPath: string[] };
}>;

export default async function Page({ params: { puckPath = [] } }: TPage) {
  const path = `/${puckPath.join("/")}`;
  const data = getPage(path);

  if (!data) {
    return notFound();
  }

  const resultData: any = await getServerData(data);

  return <Client data={data} serverData={resultData} />;
}

// Force Next.js to produce static pages: https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config#dynamic
// Delete this if you need dynamic rendering, such as access to headers or cookies
export const dynamic = "force-dynamic";
